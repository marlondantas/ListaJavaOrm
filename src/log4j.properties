#log4j.threshold=ALL
#log4j.rootLogger=ALL, stdout
#### Usando 2 appenders, 1 para logar no console, outro para um arquivo
log4j.rootCategory=INFO, stdout, fileOut

#Imprime somente mensagens com ‘priority’ WARN ou mais alto para o logger
#lembrando a ordem: DEBUG – INFO – WARN – ERROR – FATAL

#log4j.category.lopes=INFO

#### O primeiro appender escreve no console
# log4j.appender.INFO=org.apache.log4j.ConsoleAppender
# log4j.appender.INFO.layout=org.apache.log4j.PatternLayout
# ### Pattern que mostra o nome do arquivo e numero da linha, porem sem data e hora
# log4j.appender.INFO.layout.ConversionPattern=%5p [%t] (%F:%L)

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%d{dd/MM/YYYY HH:mm:ss}] %5p %t %c{2} - %m%n


#### O segundo appender escreve em um arquivo e faz um bkp ao atingir o max
log4j.appender.fileOut = org.apache.log4j.RollingFileAppender
log4j.appender.fileOut.File=./log/listaJavaOrm.log

#Mudar o encondig para UTF-8
log4j.appender.fileOut.encoding=UTF-8

### Controla o tamanho maximo do arquivo
log4j.appender.fileOut.MaxFileSize=100KB

### Faz backup dos arquivos de log (apenas 1)
log4j.appender.fileOut.MaxBackupIndex=1
log4j.appender.fileOut.layout=org.apache.log4j.PatternLayout

####imprime no formato dia/mes/ano
log4j.appender.fileOut.layout.ConversionPattern=[%-2d{dd/MM/YYYY HH:mm}] [%t] %5p %c:%L - %m%n

